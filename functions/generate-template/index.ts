import "jsr:@supabase/functions-js/edge-runtime.d.ts";
import { createClient } from 'jsr:@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type'
};

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: req.headers.get('Authorization')! }
        }
      }
    );

    const { data: { user }, error: userError } = await supabase.auth.getUser();
    if (userError || !user) {
      throw new Error('Unauthorized');
    }

    const { prompt, type } = await req.json();

    if (!prompt || !type) {
      throw new Error('Missing required fields: prompt and type');
    }

    const openaiApiKey = Deno.env.get('OPEN_AI_KEY');
    if (!openaiApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    console.log(`ü§ñ Generating ${type} template for prompt:`, prompt);

    const systemPrompt = type === 'email'
      ? `You are a professional real estate communication assistant. Generate an email template based on the user's description.

IMPORTANT: Use these exact variable placeholders in your template:
- {{PROPERTY}} - for property address
- {{PRICE}} - for property price
- {{AGENT_NAME}} - for agent name
- {{BEDROOMS}} - for number of bedrooms
- {{BATHROOMS}} - for number of bathrooms
- {{SQFT}} - for square footage

Return ONLY a valid JSON object with this exact structure:
{
  "name": "Brief template name",
  "subject": "Email subject line with variables like: Inquiry about {{PROPERTY}}",
  "body": "Professional email body with appropriate variables like {{PRICE}}, {{AGENT_NAME}}, etc."
}

Make the template professional, friendly, and include relevant variables based on context.`
      : `You are a professional real estate communication assistant. Generate an SMS template based on the user's description.

IMPORTANT: Use these exact variable placeholders in your template:
- {{PROPERTY}} - for property address
- {{PRICE}} - for property price
- {{AGENT_NAME}} - for agent name
- {{BEDROOMS}} - for number of bedrooms
- {{BATHROOMS}} - for number of bathrooms
- {{SQFT}} - for square footage

Return ONLY a valid JSON object with this exact structure:
{
  "name": "Brief template name",
  "body": "Concise SMS message (under 160 chars if possible) with appropriate variables like {{PRICE}}, {{PROPERTY}}, etc."
}

Keep it brief, professional, and include relevant variables based on context.`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: prompt }
        ],
        temperature: 0.7,
        max_tokens: 500
      })
    });

    if (!response.ok) {
      const error = await response.text();
      console.error('OpenAI API error:', error);
      throw new Error(`OpenAI API error: ${response.statusText}`);
    }

    const data = await response.json();
    const content = data.choices[0]?.message?.content;

    if (!content) {
      throw new Error('No content generated by AI');
    }

    console.log('üìù AI Response:', content);

    // Parse the JSON response
    let template;
    try {
      // Try to extract JSON from markdown code blocks if present
      const jsonMatch = content.match(/```(?:json)?\n?([\s\S]*?)```/);
      const jsonStr = jsonMatch ? jsonMatch[1] : content;
      template = JSON.parse(jsonStr.trim());
    } catch (e) {
      console.error('Failed to parse AI response:', e);
      throw new Error('Invalid JSON response from AI');
    }

    console.log('‚úÖ Template generated successfully');

    return new Response(
      JSON.stringify(template),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200
      }
    );

  } catch (error) {
    console.error('‚ùå Error:', error.message);
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400
      }
    );
  }
});


